#!/usr/local/bin/newlisp

(load "mustache.lsp")
(load "lib/nl-unittest.lsp")

(context 'MAIN)

(println)

(define-test (test_find-tag)
  (assert= (mustache:find-tag-type "{{foo}}")
           '((mustache:type "escaped") (mustache:key "foo") (mustache:content nil)))
  (assert= (mustache:find-tag-type "{{#foo}}")
           '((mustache:type "section") (mustache:key "foo") (mustache:content nil)))
  (assert= (mustache:find-tag-type "{{&foo}}")
           '((mustache:type "unescaped") (mustache:key "foo") (mustache:content nil)))
  (assert= (mustache:find-tag-type "{{!foo}}")
           '((mustache:type "comment") (mustache:key "foo") (mustache:content nil)))
  (assert= (mustache:find-tag-type "{{>foo}}")
           '((mustache:type "partial") (mustache:key "foo") (mustache:content nil)))
  (assert= (mustache:find-tag-type "{{^foo}}")
           '((mustache:type "inverted") (mustache:key "foo") (mustache:content nil)))
  (assert= (mustache:find-tag-type "{{/foo}}")
           '((mustache:type "close") (mustache:key "foo") (mustache:content nil)))
  (assert= (mustache:find-tag-type "{{ foo}}")
           '((mustache:type "escaped") (mustache:key "foo") (mustache:content nil)))
  (assert= (mustache:find-tag-type "{{ foo }}")
           '((mustache:type "escaped") (mustache:key "foo") (mustache:content nil)))
  (assert= (mustache:find-tag-type "{{foo }}")
           '((mustache:type "escaped") (mustache:key "foo") (mustache:content nil)))
  (assert= (mustache:find-tag-type "{{{foo}}}")
           '((mustache:type "unescaped") (mustache:key "foo") (mustache:content nil))))

(define template "The band {{band}} has members {{#members}}{{name}} on {{instrument}}{{/members}}, and I like them.")
(define tags (mustache:next-tag template (list)))
(define result (mustache:nest-sections tags (list (mustache:mk-tag "section" "root" (list)))))
(println result)

(define-test (test_tokens)
  (assert= tags
           '(((mustache:type "text") (mustache:key nil) (mustache:content "The band "))
             ((mustache:type "escaped") (mustache:key "band") (mustache:content nil))
             ((mustache:type "text") (mustache:key nil) (mustache:content " has members "))
             ((mustache:type "section") (mustache:key "members") (mustache:content nil))
             ((mustache:type "escaped") (mustache:key "name") (mustache:content nil))
             ((mustache:type "text") (mustache:key nil) (mustache:content " on "))
             ((mustache:type "escaped") (mustache:key "instrument") (mustache:content nil))
             ((mustache:type "close") (mustache:key "members") (mustache:content nil))
             ((mustache:type "text") (mustache:key nil) (mustache:content ", and I like them.")))))

(define-test (test_parse)
  (assert= result
           '(((mustache:type "section")
             (mustache:key "root")
             (mustache:content
              (((mustache:type "text")
                (mustache:key nil)
                (mustache:content "The band "))
               ((mustache:type "escaped")
                (mustache:key "band")
                (mustache:content nil))
               ((mustache:type "text")
                (mustache:key nil)
                (mustache:content " has members "))
               ((mustache:type "section")
                (mustache:key "members")
                (mustache:content
                 (((mustache:type "escaped")
                   (mustache:key "name")
                   (mustache:content nil))
                  ((mustache:type "text")
                   (mustache:key nil)
                   (mustache:content " on "))
                  ((mustache:type "escaped")
                   (mustache:key "instrument")
                   (mustache:content nil)))))
               ((mustache:type "text")
                (mustache:key nil)
                (mustache:content ", and I like them."))))))))

(UnitTest:run-all 'MAIN)

(println)

(exit)
